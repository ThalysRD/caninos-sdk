#!/usr/bin/env python3
"""
Teste de compatibilidade para placa Caninos Labrador 32-bit
Quad-core ARM Cortex-A9R4 CPU, 2GB LPDDR3, 16GB eMMC

Este script testa as funcionalidades b√°sicas da SDK na placa de 32 bits.
"""

import caninos_sdk as k9
import time
import logging

def test_board_detection():
    """Testa a detec√ß√£o autom√°tica da placa"""
    print("=== Teste de Detec√ß√£o da Placa ===")
    labrador = k9.Labrador()
    
    print(f"Arquitetura CPU: {labrador.cpu_architecture}")
    print(f"Vers√£o da placa: {labrador.board_version}-bit")
    print(f"Vers√£o do kernel: {labrador.kernel_version}")
    print(f"Recursos habilitados: {len(labrador.enabled_features)}")
    
    # Verificar se √© uma placa ARM de 32 bits
    if labrador.cpu_architecture == "armv7l" and labrador.board_version == "32":
        print("‚úÖ Placa ARM Cortex-A9R4 32-bit detectada corretamente!")
    else:
        print(f"‚ÑπÔ∏è  Executando em: {labrador.cpu_architecture} ({labrador.board_version}-bit)")
    
    return labrador

def test_gpio_basic(labrador):
    """Testa GPIO b√°sico"""
    print("\n=== Teste GPIO B√°sico ===")
    
    try:
        # Testar pino 15 (muito comum nos exemplos)
        labrador.pin15.enable_gpio(k9.Pin.Direction.OUTPUT, alias="led_test")
        print("‚úÖ Pino 15 habilitado como sa√≠da")
        
        # Testar alguns ciclos de on/off
        for i in range(3):
            print(f"  Ciclo {i+1}: LED ligado")
            labrador.led_test.high()
            time.sleep(0.5)
            
            print(f"  Ciclo {i+1}: LED desligado")
            labrador.led_test.low()
            time.sleep(0.5)
            
        print("‚úÖ Teste de GPIO b√°sico conclu√≠do")
        
    except Exception as e:
        print(f"‚ùå Erro no teste GPIO: {e}")
        return False
    
    return True

def test_pin_mapping_32bit():
    """Testa o mapeamento espec√≠fico de pinos para 32-bit"""
    print("\n=== Teste Mapeamento de Pinos 32-bit ===")
    
    # Pinos espec√≠ficos da vers√£o 32-bit
    test_pins = [15, 19, 22, 18]  # Inclui pino 19 que tem "C25" s√≥ na vers√£o 32-bit
    
    for pin in test_pins:
        try:
            chip_id, line_id = k9.Pin.get_num(pin, "32")
            if chip_id is not None and line_id is not None:
                print(f"‚úÖ Pino {pin}: chip{chip_id}, linha{line_id}")
            else:
                print(f"‚ùå Pino {pin}: mapeamento falhou")
        except Exception as e:
            print(f"‚ùå Pino {pin}: erro - {e}")

def test_i2c_availability(labrador):
    """Testa disponibilidade do I2C"""
    print("\n=== Teste I2C ===")
    
    try:
        available_ports = labrador.i2c.list_ports()
        print(f"Portas I2C dispon√≠veis: {available_ports}")
        
        if "/dev/i2c-2" in available_ports:
            print("‚úÖ Porta I2C padr√£o (/dev/i2c-2) encontrada")
        else:
            print("‚ö†Ô∏è  Porta I2C padr√£o n√£o encontrada")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar I2C: {e}")

def test_serial_availability(labrador):
    """Testa disponibilidade das portas seriais"""
    print("\n=== Teste Serial ===")
    
    try:
        available_ports = labrador.serial_usb.list_ports()
        print(f"Portas seriais dispon√≠veis: {available_ports}")
        
        if k9.SERIAL_USB in available_ports:
            print(f"‚úÖ Porta USB serial ({k9.SERIAL_USB}) encontrada")
        if k9.SERIAL_HEADER_40_PINS in available_ports:
            print(f"‚úÖ Porta serial do header 40 pinos ({k9.SERIAL_HEADER_40_PINS}) encontrada")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar Serial: {e}")

def main():
    """Fun√ß√£o principal de teste"""
    print("Caninos SDK - Teste de Compatibilidade 32-bit")
    print("=" * 50)
    
    # Configurar logging para ver mais detalhes
    logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        # Detectar placa
        labrador = test_board_detection()
        
        # Testar mapeamento de pinos
        test_pin_mapping_32bit()
        
        # Testar perif√©ricos
        test_i2c_availability(labrador)
        test_serial_availability(labrador)
        
        # Testar GPIO (s√≥ se n√£o estiver em PC)
        if labrador.cpu_architecture != "x86_64":
            success = test_gpio_basic(labrador)
            if success:
                print("\nüéâ Todos os testes de GPIO passaram!")
            else:
                print("\n‚ö†Ô∏è  Alguns testes de GPIO falharam")
        else:
            print("\nüñ•Ô∏è  Executando em PC - testes de GPIO pulados")
            
        print("\n‚úÖ Teste de compatibilidade conclu√≠do")
        
    except Exception as e:
        print(f"\n‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
